# coding: utf-8

"""
    Locationforecast

    Weather forecast for a specified place

    The version of the OpenAPI document: 2.0
    Contact: weatherapi-adm@met.no
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from openapi_client.models.forecast_time_step_data_instant import ForecastTimeStepDataInstant
from openapi_client.models.forecast_time_step_data_next12_hours import ForecastTimeStepDataNext12Hours
from openapi_client.models.forecast_time_step_data_next1_hours import ForecastTimeStepDataNext1Hours
from openapi_client.models.forecast_time_step_data_next6_hours import ForecastTimeStepDataNext6Hours
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ForecastTimeStepData(BaseModel):
    """
    Forecast for a specific time
    """ # noqa: E501
    instant: ForecastTimeStepDataInstant
    next_12_hours: Optional[ForecastTimeStepDataNext12Hours] = None
    next_1_hours: Optional[ForecastTimeStepDataNext1Hours] = None
    next_6_hours: Optional[ForecastTimeStepDataNext6Hours] = None
    __properties: ClassVar[List[str]] = ["instant", "next_12_hours", "next_1_hours", "next_6_hours"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ForecastTimeStepData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of instant
        if self.instant:
            _dict['instant'] = self.instant.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_12_hours
        if self.next_12_hours:
            _dict['next_12_hours'] = self.next_12_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_1_hours
        if self.next_1_hours:
            _dict['next_1_hours'] = self.next_1_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of next_6_hours
        if self.next_6_hours:
            _dict['next_6_hours'] = self.next_6_hours.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ForecastTimeStepData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instant": ForecastTimeStepDataInstant.from_dict(obj.get("instant")) if obj.get("instant") is not None else None,
            "next_12_hours": ForecastTimeStepDataNext12Hours.from_dict(obj.get("next_12_hours")) if obj.get("next_12_hours") is not None else None,
            "next_1_hours": ForecastTimeStepDataNext1Hours.from_dict(obj.get("next_1_hours")) if obj.get("next_1_hours") is not None else None,
            "next_6_hours": ForecastTimeStepDataNext6Hours.from_dict(obj.get("next_6_hours")) if obj.get("next_6_hours") is not None else None
        })
        return _obj


