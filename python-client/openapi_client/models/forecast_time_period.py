# coding: utf-8

"""
    Locationforecast

    Weather forecast for a specified place

    The version of the OpenAPI document: 2.0
    Contact: weatherapi-adm@met.no
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ForecastTimePeriod(BaseModel):
    """
    Weather parameters valid for a specified time period.
    """ # noqa: E501
    air_temperature_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum air temperature in period")
    air_temperature_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum air temperature in period")
    precipitation_amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Best estimate for amount of precipitation for this period")
    precipitation_amount_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum amount of precipitation for this period")
    precipitation_amount_min: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Minimum amount of precipitation for this period")
    probability_of_precipitation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Probability of any precipitation coming for this period")
    probability_of_thunder: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Probability of any thunder coming for this period")
    ultraviolet_index_clear_sky_max: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maximum ultraviolet index if sky is clear")
    __properties: ClassVar[List[str]] = ["air_temperature_max", "air_temperature_min", "precipitation_amount", "precipitation_amount_max", "precipitation_amount_min", "probability_of_precipitation", "probability_of_thunder", "ultraviolet_index_clear_sky_max"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ForecastTimePeriod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ForecastTimePeriod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "air_temperature_max": obj.get("air_temperature_max"),
            "air_temperature_min": obj.get("air_temperature_min"),
            "precipitation_amount": obj.get("precipitation_amount"),
            "precipitation_amount_max": obj.get("precipitation_amount_max"),
            "precipitation_amount_min": obj.get("precipitation_amount_min"),
            "probability_of_precipitation": obj.get("probability_of_precipitation"),
            "probability_of_thunder": obj.get("probability_of_thunder"),
            "ultraviolet_index_clear_sky_max": obj.get("ultraviolet_index_clear_sky_max")
        })
        return _obj


