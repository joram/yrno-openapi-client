# coding: utf-8

"""
    Locationforecast

    Weather forecast for a specified place

    The version of the OpenAPI document: 2.0
    Contact: weatherapi-adm@met.no
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.forecast_meta import ForecastMeta

class TestForecastMeta(unittest.TestCase):
    """ForecastMeta unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ForecastMeta:
        """Test ForecastMeta
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ForecastMeta`
        """
        model = ForecastMeta()
        if include_optional:
            return ForecastMeta(
                units = openapi_client.models.forecast_units.ForecastUnits(
                    air_pressure_at_sea_level = 'hPa', 
                    air_temperature = 'C', 
                    air_temperature_max = 'C', 
                    air_temperature_min = 'C', 
                    cloud_area_fraction = '%', 
                    cloud_area_fraction_high = '%', 
                    cloud_area_fraction_low = '%', 
                    cloud_area_fraction_medium = '%', 
                    dew_point_temperature = 'C', 
                    fog_area_fraction = '%', 
                    precipitation_amount = 'mm', 
                    precipitation_amount_max = 'mm', 
                    precipitation_amount_min = 'mm', 
                    probability_of_precipitation = '%', 
                    probability_of_thunder = '%', 
                    relative_humidity = '%', 
                    ultraviolet_index_clear_sky_max = '1', 
                    wind_from_direction = 'degrees', 
                    wind_speed = 'm/s', 
                    wind_speed_of_gust = 'm/s', ),
                updated_at = '2019-12-03T13:52:13Z'
            )
        else:
            return ForecastMeta(
                units = openapi_client.models.forecast_units.ForecastUnits(
                    air_pressure_at_sea_level = 'hPa', 
                    air_temperature = 'C', 
                    air_temperature_max = 'C', 
                    air_temperature_min = 'C', 
                    cloud_area_fraction = '%', 
                    cloud_area_fraction_high = '%', 
                    cloud_area_fraction_low = '%', 
                    cloud_area_fraction_medium = '%', 
                    dew_point_temperature = 'C', 
                    fog_area_fraction = '%', 
                    precipitation_amount = 'mm', 
                    precipitation_amount_max = 'mm', 
                    precipitation_amount_min = 'mm', 
                    probability_of_precipitation = '%', 
                    probability_of_thunder = '%', 
                    relative_humidity = '%', 
                    ultraviolet_index_clear_sky_max = '1', 
                    wind_from_direction = 'degrees', 
                    wind_speed = 'm/s', 
                    wind_speed_of_gust = 'm/s', ),
                updated_at = '2019-12-03T13:52:13Z',
        )
        """

    def testForecastMeta(self):
        """Test ForecastMeta"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
