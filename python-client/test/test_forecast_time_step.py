# coding: utf-8

"""
    Locationforecast

    Weather forecast for a specified place

    The version of the OpenAPI document: 2.0
    Contact: weatherapi-adm@met.no
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from openapi_client.models.forecast_time_step import ForecastTimeStep

class TestForecastTimeStep(unittest.TestCase):
    """ForecastTimeStep unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ForecastTimeStep:
        """Test ForecastTimeStep
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ForecastTimeStep`
        """
        model = ForecastTimeStep()
        if include_optional:
            return ForecastTimeStep(
                data = openapi_client.models.forecast_time_step_data.ForecastTimeStep_data(
                    instant = openapi_client.models.forecast_time_step_data_instant.ForecastTimeStep_data_instant(
                        details = openapi_client.models.forecast_time_instant.ForecastTimeInstant(
                            air_pressure_at_sea_level = 1017.23, 
                            air_temperature = 17.1, 
                            cloud_area_fraction = 95.2, 
                            cloud_area_fraction_high = 95.2, 
                            cloud_area_fraction_low = 95.2, 
                            cloud_area_fraction_medium = 95.2, 
                            dew_point_temperature = 8.1, 
                            fog_area_fraction = 95.2, 
                            relative_humidity = 81.1, 
                            wind_from_direction = 121.3, 
                            wind_speed = 5.9, 
                            wind_speed_of_gust = 15.9, ), ), 
                    next_12_hours = openapi_client.models.forecast_time_step_data_next_12_hours.ForecastTimeStep_data_next_12_hours(
                        details = openapi_client.models.forecast_time_period.ForecastTimePeriod(
                            air_temperature_max = 17.1, 
                            air_temperature_min = 11.1, 
                            precipitation_amount = 1.71, 
                            precipitation_amount_max = 4.32, 
                            precipitation_amount_min = 4.32, 
                            probability_of_precipitation = 37.0, 
                            probability_of_thunder = 54.32, 
                            ultraviolet_index_clear_sky_max = 1.0, ), 
                        summary = openapi_client.models.forecast_summary.ForecastSummary(
                            symbol_code = clearsky_day, ), ), 
                    next_1_hours = openapi_client.models.forecast_time_step_data_next_1_hours.ForecastTimeStep_data_next_1_hours(
                        details = openapi_client.models.forecast_time_period.ForecastTimePeriod(
                            air_temperature_max = 17.1, 
                            air_temperature_min = 11.1, 
                            precipitation_amount = 1.71, 
                            precipitation_amount_max = 4.32, 
                            precipitation_amount_min = 4.32, 
                            probability_of_precipitation = 37.0, 
                            probability_of_thunder = 54.32, 
                            ultraviolet_index_clear_sky_max = 1.0, ), 
                        summary = openapi_client.models.forecast_summary.ForecastSummary(
                            symbol_code = clearsky_day, ), ), 
                    next_6_hours = openapi_client.models.forecast_time_step_data_next_6_hours.ForecastTimeStep_data_next_6_hours(
                        details = , 
                        summary = , ), ),
                time = '2019-12-03T14:00:00Z'
            )
        else:
            return ForecastTimeStep(
                data = openapi_client.models.forecast_time_step_data.ForecastTimeStep_data(
                    instant = openapi_client.models.forecast_time_step_data_instant.ForecastTimeStep_data_instant(
                        details = openapi_client.models.forecast_time_instant.ForecastTimeInstant(
                            air_pressure_at_sea_level = 1017.23, 
                            air_temperature = 17.1, 
                            cloud_area_fraction = 95.2, 
                            cloud_area_fraction_high = 95.2, 
                            cloud_area_fraction_low = 95.2, 
                            cloud_area_fraction_medium = 95.2, 
                            dew_point_temperature = 8.1, 
                            fog_area_fraction = 95.2, 
                            relative_humidity = 81.1, 
                            wind_from_direction = 121.3, 
                            wind_speed = 5.9, 
                            wind_speed_of_gust = 15.9, ), ), 
                    next_12_hours = openapi_client.models.forecast_time_step_data_next_12_hours.ForecastTimeStep_data_next_12_hours(
                        details = openapi_client.models.forecast_time_period.ForecastTimePeriod(
                            air_temperature_max = 17.1, 
                            air_temperature_min = 11.1, 
                            precipitation_amount = 1.71, 
                            precipitation_amount_max = 4.32, 
                            precipitation_amount_min = 4.32, 
                            probability_of_precipitation = 37.0, 
                            probability_of_thunder = 54.32, 
                            ultraviolet_index_clear_sky_max = 1.0, ), 
                        summary = openapi_client.models.forecast_summary.ForecastSummary(
                            symbol_code = clearsky_day, ), ), 
                    next_1_hours = openapi_client.models.forecast_time_step_data_next_1_hours.ForecastTimeStep_data_next_1_hours(
                        details = openapi_client.models.forecast_time_period.ForecastTimePeriod(
                            air_temperature_max = 17.1, 
                            air_temperature_min = 11.1, 
                            precipitation_amount = 1.71, 
                            precipitation_amount_max = 4.32, 
                            precipitation_amount_min = 4.32, 
                            probability_of_precipitation = 37.0, 
                            probability_of_thunder = 54.32, 
                            ultraviolet_index_clear_sky_max = 1.0, ), 
                        summary = openapi_client.models.forecast_summary.ForecastSummary(
                            symbol_code = clearsky_day, ), ), 
                    next_6_hours = openapi_client.models.forecast_time_step_data_next_6_hours.ForecastTimeStep_data_next_6_hours(
                        details = , 
                        summary = , ), ),
                time = '2019-12-03T14:00:00Z',
        )
        """

    def testForecastTimeStep(self):
        """Test ForecastTimeStep"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
